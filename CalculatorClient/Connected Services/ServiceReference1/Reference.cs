//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CalculatorClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://SomeInteresting.And.Meaningful.URL", ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SomeInteresting.And.Meaningful.URL/ICalculator/Add", ReplyAction="http://SomeInteresting.And.Meaningful.URL/ICalculator/AddResponse")]
        double Add(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SomeInteresting.And.Meaningful.URL/ICalculator/Add", ReplyAction="http://SomeInteresting.And.Meaningful.URL/ICalculator/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SomeInteresting.And.Meaningful.URL/ICalculator/Subtract", ReplyAction="http://SomeInteresting.And.Meaningful.URL/ICalculator/SubtractResponse")]
        double Subtract(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SomeInteresting.And.Meaningful.URL/ICalculator/Subtract", ReplyAction="http://SomeInteresting.And.Meaningful.URL/ICalculator/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SomeInteresting.And.Meaningful.URL/ICalculator/Multiply", ReplyAction="http://SomeInteresting.And.Meaningful.URL/ICalculator/MultiplyResponse")]
        double Multiply(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SomeInteresting.And.Meaningful.URL/ICalculator/Multiply", ReplyAction="http://SomeInteresting.And.Meaningful.URL/ICalculator/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SomeInteresting.And.Meaningful.URL/ICalculator/Divide", ReplyAction="http://SomeInteresting.And.Meaningful.URL/ICalculator/DivideResponse")]
        double Divide(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SomeInteresting.And.Meaningful.URL/ICalculator/Divide", ReplyAction="http://SomeInteresting.And.Meaningful.URL/ICalculator/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double n1, double n2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://SomeInteresting.And.Meaningful.URL/ICalculator/Log", ReplyAction = "http://SomeInteresting.And.Meaningful.URL/ICalculator/LogResponse")]
        double Log(double n1, double n2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://SomeInteresting.And.Meaningful.URL/ICalculator/Log", ReplyAction = "http://SomeInteresting.And.Meaningful.URL/ICalculator/LogResponse")]
        System.Threading.Tasks.Task<double> LogAsync(double n1, double n2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<ServiceReference1.ICalculator>, ServiceReference1.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double n1, double n2) {
            return base.Channel.Add(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double n1, double n2) {
            return base.Channel.AddAsync(n1, n2);
        }
        
        public double Subtract(double n1, double n2) {
            return base.Channel.Subtract(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(double n1, double n2) {
            return base.Channel.SubtractAsync(n1, n2);
        }
        
        public double Multiply(double n1, double n2) {
            return base.Channel.Multiply(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double n1, double n2) {
            return base.Channel.MultiplyAsync(n1, n2);
        }
        
        public double Divide(double n1, double n2) {
            return base.Channel.Divide(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double n1, double n2) {
            return base.Channel.DivideAsync(n1, n2);
        }

        public double Log(double n1, double n2)
        {
            return base.Channel.Log(n1, n2);
        }

        public System.Threading.Tasks.Task<double> LogAsync(double n1, double n2)
        {
            return base.Channel.LogAsync(n1, n2);
        }
    }
}
